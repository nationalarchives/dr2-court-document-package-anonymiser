var searchIndex = JSON.parse('{\
"anonymise":{"doc":"","t":"DLLLLLLFLLLLMLMFLLLLL","n":["Opt","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","files_in_input_dir","from","from_arg_matches","from_arg_matches_mut","group_id","input","into","output","process_package","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"anonymise"],[21,"clap_builder::builder::command"],[22,"std::path"],[23,"alloc::vec"],[24,"std::io::error"],[25,"core::result"],[26,"clap_builder::parser::matches::arg_matches"],[27,"clap_builder"],[28,"clap_builder::util::id"],[29,"core::option"],[30,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","","","Input folder","Calls <code>U::from(self)</code>.","Output folder","Processes things","","","","",""],"i":[0,7,7,7,7,7,7,0,7,7,7,7,7,7,7,0,7,7,7,7,7],"f":[0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],[2,[[5,[[3,[2]],4]]]],[-1,-1,[]],[6,[[5,[7,8]]]],[6,[[5,[7,8]]]],[[],[[10,[9]]]],0,[-1,-2,[],[]],0,[[2,2],[[5,[2,4]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,11,[]],[[7,6],[[5,[12,8]]]],[[7,6],[[5,[12,8]]]]],"c":[],"p":[[3,"Command",21],[3,"PathBuf",22],[3,"Vec",23],[3,"Error",24],[4,"Result",25],[3,"ArgMatches",26],[3,"Opt",0],[6,"Error",27],[3,"Id",28],[4,"Option",29],[3,"TypeId",30],[15,"tuple"]]},\
"anonymiser":{"doc":"","t":"DLLMMFLLFLLL","n":["Files","borrow","borrow_mut","dir_output","files","files_from_input_arguments","from","into","main","try_from","try_into","type_id"],"q":[[0,"anonymiser"],[12,"anonymise"],[13,"core::result"],[14,"core::any"]],"d":["","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,2,2,2,2,0,2,2,0,2,2,2],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[1,2],[-1,-1,[]],[-1,-2,[],[]],[[],3],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]]],"c":[],"p":[[3,"Opt",12],[3,"Files",0],[15,"tuple"],[4,"Result",13],[3,"TypeId",14]]},\
"lambda":{"doc":"","t":"F","n":["process_record"],"q":[[0,"lambda"],[1,"aws_lambda_events::event::sqs"],[2,"std::path"],[3,"core::option"],[4,"lambda_runtime"],[5,"core::result"]],"d":[""],"i":[0],"f":[[[1,2,[4,[3]]],[[6,[2,5]]]]],"c":[],"p":[[3,"SqsMessage",1],[3,"PathBuf",2],[15,"str"],[4,"Option",3],[6,"Error",4],[4,"Result",5]]},\
"testlib":{"doc":"","t":"DLLMMMFFLFLFLLLF","n":["MetadataJson","borrow","borrow_mut","checksum","contact_email","contact_name","create_package","decompress_test_file","from","get_metadata_json_fields","into","json_missing_filename","try_from","try_into","type_id","valid_json"],"q":[[0,"testlib"],[16,"assert_fs::fixture::dir"],[17,"alloc::string"],[18,"core::option"],[19,"std::path"],[20,"std::path"],[21,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,8,8,8,8,8,0,0,8,0,8,0,8,8,8,0],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[1,2,[4,[3]]],5],[[5,1],6],[-1,-1,[]],[7,8],[-1,-2,[],[]],[[],2],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[],2]],"c":[],"p":[[3,"TempDir",16],[15,"str"],[3,"String",17],[4,"Option",18],[3,"PathBuf",19],[15,"tuple"],[3,"Path",19],[3,"MetadataJson",0],[4,"Result",20],[3,"TypeId",21]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
