var searchIndex = new Map(JSON.parse('[\
["anonymiser",{"doc":"Anonymiser script","t":"FNNOOHNNHNNN","n":["Files","borrow","borrow_mut","dir_output","files","files_from_input_arguments","from","into","main","try_from","try_into","type_id"],"q":[[0,"anonymiser"],[12,"anonymiser_lib"],[13,"core::result"],[14,"core::any"]],"d":["The input files and output directory","","","","","Process the input arguments","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The entrypoint for the anonymiser script","","",""],"i":[0,2,2,2,2,0,2,2,0,2,2,2],"f":"`{ce{}{}}0``{bd}{cc{}}2{{}f}{c{{h{e}}}{}{}}0{cj{}}","c":[],"p":[[5,"Opt",12],[5,"Files",0],[1,"unit"],[6,"Result",13],[5,"TypeId",14]],"b":[]}],\
["anonymiser_lib",{"doc":"Court document package anonymiser library","t":"FNNNNNNHHHNNNNHONHHOHHHNNNNNH","n":["Opt","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","create_docx_with_checksum","decompress_file","files_in_input_dir","from","from_arg_matches","from_arg_matches_mut","group_id","if_present_delete","input","into","is_file","is_not_hidden","output","parse_metadata_json","process_package","tar_folder","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","update_json_file"],"q":[[0,"anonymiser_lib"],[29,"clap_builder::builder::command"],[30,"std::path"],[31,"serde_json::value"],[32,"alloc::string"],[33,"std::io::error"],[34,"core::result"],[35,"std::path"],[36,"clap_builder::parser::matches::arg_matches"],[37,"clap_builder"],[38,"clap_builder::util::id"],[39,"core::option"],[40,"std::io::error"],[41,"core::any"]],"d":["A struct representing the input arguments","","","","","","","Creates a docx and returns a checksum","Untar and unzip the input tar.gz file","List files in input directory","Returns the argument unchanged.","","","","Helper function to delete a file if present","Input folder","Calls <code>U::from(self)</code>.","Helper function to check if the entry is a file","Helper function to check if a file does not start with <code>.</code>","Output folder","Read the metadata.json file and parse it into a serde <code>Value</code>","Package processor","Tars and Gzips the specified folder","","","","","","Anonymise the contact fields and update the checksum"],"i":[0,11,11,11,11,11,11,0,0,0,11,11,11,11,0,11,11,0,0,11,0,0,0,11,11,11,11,11,0],"f":"`{bb}0{ce{}{}}0{{}b}0{{df}{{l{hj}}}}{{nn}{{l{A`j}}}}{n{{l{{Ab{n}}j}}}}{cc{}}{Ad{{l{AfAh}}}}0{{}{{Al{Aj}}}}{n{{An{A`}}}}`8{B`Bb}0`{n{{l{fj}}}}{{nn}{{l{nj}}}}{{nnh}{{l{A`j}}}}{c{{l{e}}}{}{}}0{cBd{}}{{AfAd}{{l{A`Ah}}}}0{{nhf}{{l{A`j}}}}","c":[],"p":[[5,"Command",29],[5,"Path",30],[6,"Value",31],[5,"String",32],[5,"Error",33],[6,"Result",34],[5,"PathBuf",30],[1,"unit"],[5,"Vec",35],[5,"ArgMatches",36],[5,"Opt",0],[8,"Error",37],[5,"Id",38],[6,"Option",39],[8,"Result",33],[5,"DirEntry",40],[1,"bool"],[5,"TypeId",41]],"b":[]}],\
["lambda",{"doc":"Anonymiser lambda","t":"FFHNNNNHHNNHNNNNNNNNOHOOONNONNNNNNH","n":["MessageBody","S3Details","aws_config","borrow","borrow","borrow_mut","borrow_mut","create_s3_client","create_sqs_client","deserialize","deserialize","download","from","from","into","into","into_response","into_response","into_shared","into_shared","parameters","process_record","reference","s3_bucket","s3_key","serialize","serialize","status","try_from","try_from","try_into","try_into","type_id","type_id","upload"],"q":[[0,"lambda"],[35,"core::option"],[36,"aws_types::sdk_config"],[37,"aws_sdk_s3::client"],[38,"aws_sdk_sqs::client"],[39,"core::result"],[40,"serde::de"],[41,"alloc::string"],[42,"std::path"],[43,"std::path"],[44,"hyper::body::body"],[45,"lambda_runtime::types"],[46,"aws_lambda_events::event::sqs"],[47,"serde::ser"],[48,"core::any"]],"d":["The bucket and key for the file we are processing","","Creates an AWS SDK config object","","","","","Creates an S3 client","Creates an SQS client","","","Downloads the specified file","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Processes the SQS message.","","","","","","","","","","","","","Uploads the specified file"],"i":[0,0,0,6,9,6,9,0,0,6,9,0,6,9,6,9,6,9,6,9,6,0,9,9,9,6,9,9,6,9,6,9,6,9,0],"f":"``{{b{d{b}}}f}{ce{}{}}000{{{d{b}}}h}{{{d{b}}}j}{c{{n{l}}}A`}{c{{n{Ab}}}A`}{{hAdAdAf}{{n{AhAj}}}}{cc{}}066{c{{An{eAl}}}{}{}}077`{{B`Ah{d{b}}{d{b}}}{{n{AhAj}}}}```{{lc}nBb}{{Abc}nBb}`{c{{n{e}}}{}{}}000{cBd{}}0{{hAhbb}{{n{BfAj}}}}","c":[],"p":[[1,"str"],[6,"Option",35],[5,"SdkConfig",36],[5,"Client",37],[5,"Client",38],[5,"MessageBody",0],[6,"Result",39],[10,"Deserializer",40],[5,"S3Details",0],[5,"String",41],[5,"Path",42],[5,"PathBuf",42],[8,"Error",43],[5,"Body",44],[6,"FunctionResponse",45],[5,"SqsMessage",46],[10,"Serializer",47],[5,"TypeId",48],[1,"unit"]],"b":[]}],\
["testlib",{"doc":"Test library functions","t":"FNNOOOHHNHNHHNNNH","n":["MetadataJson","borrow","borrow_mut","checksum","contact_email","contact_name","create_package","decompress_test_file","from","get_metadata_json_fields","into","json_missing_filename","metadata_from_json_value","try_from","try_into","type_id","valid_json"],"q":[[0,"testlib"],[17,"assert_fs::fixture::dir"],[18,"alloc::string"],[19,"core::option"],[20,"std::path"],[21,"std::path"],[22,"core::result"],[23,"core::any"]],"d":["Represents the fields to be anonymised","","","","","","Creates a test tar.gz file","Decompresses the test tar.gz file","Returns the argument unchanged.","Read the metadata.json file and parse the fields to be â€¦","Calls <code>U::from(self)</code>.","An input string with the filename missing","Parse the fields from the json value","","","","An valid input string"],"i":[0,8,8,8,8,8,0,0,8,0,8,0,0,8,8,8,0],"f":"`{ce{}{}}0```{{bd{h{f}}}j}{{jb}l}{cc{}}{nA`}4{{}d}{AbA`}{c{{Ad{e}}}{}{}}0{cAf{}}3","c":[],"p":[[5,"TempDir",17],[1,"str"],[5,"String",18],[6,"Option",19],[5,"PathBuf",20],[1,"unit"],[5,"Path",20],[5,"MetadataJson",0],[6,"Value",21],[6,"Result",22],[5,"TypeId",23]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
